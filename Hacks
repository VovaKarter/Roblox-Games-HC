local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/VovaKarter/Roblox-Games-HC/refs/heads/main/ChangedRayField'))()

local bb=game:GetService("VirtualUser")

game:GetService("Players").LocalPlayer.Idled:connect(function()
	bb:CaptureController()bb:ClickButton2(Vector2.new())
end)

local Window = Rayfield:CreateWindow({
	Name = "🌠Sirius🌠",
	LoadingTitle = "🌠Sirius🌠 Loading",
	LoadingSubtitle = "by LOR3M",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},
	Discord = {
		Enabled = false,
		Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
		RememberJoins = true -- Set this to false to make them join the discord every time they load it up
	},
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Untitled",
		Subtitle = "Key System",
		Note = "No method of obtaining the key is provided",
		FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
		SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
	}
})

local MainTab = Window:CreateTab("🏠Home", nil) -- Title, Image

Rayfield:Notify({
	Title = "You executed the script!",
	Content = "Notification Content",
	Duration = 5,
	Image = nil,
	Actions = { -- Notification Buttons
		Ignore = {
			Name = "Okay!",
			Callback = function()
				print("The user tapped Okay!")
			end
		},
	},
})

if game.PlaceId == 142823291 then
	local MM2Tab = Window:CreateTab("💥MM2", nil) -- Title, Image
	local GmName = MM2Tab:CreateSection("Murder Mystery 2")
	local Stopped = false
	local FF = false

	local Toggle = MM2Tab:CreateToggle({
		Name = "AutoFarm",
		CurrentValue = false,
		Flag = "AutoFarmOn", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			while Value do
				wait(1)
				if Value then
					if Stopped == false then
						Stopped = true
						local Map = game.Workspace:FindFirstChild("Barn") or game.Workspace:FindFirstChild("VampireCastle") or game.Workspace:FindFirstChild("Office3") or game.Workspace:FindFirstChild("MilBase") or game.Workspace:FindFirstChild("Mineshaft") or game.Workspace:FindFirstChild("Bank2") or game.Workspace:FindFirstChild("Mansion2") or game.Workspace:FindFirstChild("Hotel") or game.Workspace:FindFirstChild("BioLab") or game.Workspace:FindFirstChild("House2") or game.Workspace:FindFirstChild("Factory") or game.Workspace:FindFirstChild("MilBase") or game.Workspace:FindFirstChild("ResearchFacility") or game.Workspace:FindFirstChild("Bank2") or game.Workspace:FindFirstChild("Hospital3") or game.Workspace:FindFirstChild("PoliceStation") or game.Workspace:FindFirstChild("Workplace") or game.Workspace:FindFirstChild("Farmhouse")
						if Map then
							if Map:FindFirstChild("CoinContainer") then
								for i,v in pairs(Map.CoinContainer:GetChildren()) do 
									if game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
										if game.Players.LocalPlayer.PlayerGui:FindFirstChild("MainGUI") and game.Players.LocalPlayer.PlayerGui.MainGUI:FindFirstChild("Game") then
											if v:FindFirstChild("TouchInterest") and game.Players.LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("CoinBags") then
												if game.Players.LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("CoinBags").Container.Candy.Full.Visible == false then
													if Map:FindFirstChild("Map") and game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
														wait(1.5)
														local Pos = Map.Map.WorldPivot.Position - Vector3.new(0, 200, 0)
														local NewPart = Instance.new("Part", Map)
														NewPart.Size = Vector3.new(2048, 69.039, 2048)
														NewPart.Anchored = true
														NewPart.Position = Pos
														NewPart.Name = "NewPart"
													end
													if #Map:GetChildren() >= 2 then
														for i,v in pairs(Map:GetChildren()) do
															if v.Name ~= "CoinContainer" and v.Name ~= "NewPart" then
																v:Destroy()
															end
														end
													end
													if game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
														game.Workspace[game.Players.LocalPlayer.Name]:MoveTo(v.Position)
														wait(0.7)
														if game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
															game.Workspace[game.Players.LocalPlayer.Name]:MoveTo(game.Workspace.Lobby.Spawns.SpawnLocation.Position)	
														end
														wait(1.8)		
													end
													FF = false
												elseif FF == true then
													FF = false
													game.Workspace[game.Players.LocalPlayer.Name].Torso:Destroy()
												end
											end 
										else
											if v.Name ~= "CollectedCoin" and game.Players.LocalPlayer.PlayerGui.MainGUI.Game:FindFirstChild("CashBag") then
												if game.Players.LocalPlayer.PlayerGui.MainGUI.Game.CashBag.Full.Visible == false then
													if Map:FindFirstChild("Map") and game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
														wait(1.5)
														local Pos = Map.Map.WorldPivot.Position - Vector3.new(0, 200, 0)
														local NewPart = Instance.new("Part", Map)
														NewPart.Size = Vector3.new(2048, 69.039, 2048)
														NewPart.Anchored = true
														NewPart.Position = Pos
														NewPart.Name = "NewPart"
													end
													if #Map:GetChildren() >= 2 then
														for i,v in pairs(Map:GetChildren()) do
															if v.Name ~= "CoinContainer" and v.Name ~= "NewPart" then
																v:Destroy()
															end
														end
													end
													if game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
														game.Workspace[game.Players.LocalPlayer.Name]:MoveTo(v.Position)
														wait(0.7)
														if game.Workspace:FindFirstChild(tostring(game.Players.LocalPlayer.Name)) then
															game.Workspace[game.Players.LocalPlayer.Name]:MoveTo(game.Workspace.Lobby.Spawns.SpawnLocation.Position)	
														end
														wait(1.8)		
													end
													FF = false
												elseif FF == true then
													FF = false
													game.Workspace[game.Players.LocalPlayer.Name].Torso:Destroy()
												end
											end
										end 
									end
								end
							end
						end
						Stopped = false
					end
				end
			end
		end,
	})
	local Toggle = MM2Tab:CreateToggle({
		Name = "ESP",
		CurrentValue = false,
		Flag = "ESPOn", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			while Value do
				wait(1)
				if Value then
					for i,v in pairs(game.Players:GetChildren()) do
						if v.Backpack:FindFirstChild("Knife") then
							if not v.Backpack:FindFirstChild("LOL") then
								local AddHigh = Instance.new("Highlight")
								AddHigh.Parent = game.Workspace[tostring(v.Name)]
								AddHigh.DepthMode = "AlwaysOnTop"
								AddHigh.Name = "LOL"
							end
						elseif game.Workspace[tostring(v.Name)]:FindFirstChild("Knife") then
							if not game.Workspace[tostring(v.Name)]:FindFirstChild("LOL") then
								local AddHigh = Instance.new("Highlight")
								AddHigh.Parent = game.Workspace[tostring(v.Name)]
								AddHigh.DepthMode = "AlwaysOnTop"
								AddHigh.Name = "LOL"
							end
						end
						if v.Backpack:FindFirstChild("Gun") then
							if not v.Backpack:FindFirstChild("LOL") then
								local AddHigh = Instance.new("Highlight")
								AddHigh.Parent = game.Workspace[tostring(v.Name)]
								AddHigh.FillColor = Color3.fromRGB(35, 185, 255)
								AddHigh.DepthMode = "AlwaysOnTop"
								AddHigh.Name = "LOL"
							end
						elseif game.Workspace[tostring(v.Name)]:FindFirstChild("Gun") then
							if not game.Workspace[tostring(v.Name)]:FindFirstChild("LOL") then
								local AddHigh = Instance.new("Highlight")
								AddHigh.Parent = game.Workspace[tostring(v.Name)]
								AddHigh.FillColor = Color3.fromRGB(35, 185, 255)
								AddHigh.DepthMode = "AlwaysOnTop"
								AddHigh.Name = "LOL"
							end
						end
						if game.Workspace:FindFirstChild("GunDrop") then
							if not game.Workspace.GunDrop:FindFirstChild("LOL") then
								local AddHigh = Instance.new("Highlight")
								AddHigh.Parent = game.Workspace.GunDrop
								AddHigh.FillColor = Color3.fromRGB(35, 185, 255)
								AddHigh.DepthMode = "AlwaysOnTop"
								AddHigh.Name = "LOL"
							end
						end
					end
				end
			end
		end,
	})
elseif game.PlaceId == 6456351776 then
	local KP = Window:CreateTab("💥Kaiju Paradise", nil) -- Title, Image
	local plr = game.Players.LocalPlayer

	local db = false
	local Setter = false

	local Cloned
	local Connected1 = nil
	local CD = 0

	local function DelAnti()
		if plr.PlayerScripts.Core:FindFirstChild("Init") then
			if not Cloned then
				Cloned = plr.PlayerScripts.Core.Init:Clone()
			end
			plr.PlayerScripts.Core.Init:Destroy()
			if not Connected1 then
				Connected1 = plr.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
					if plr.Character.Humanoid.Health <= 0 then
						if Cloned then
							local New = Cloned:Clone()
							New.Parent = plr.PlayerScripts.Core
							if not Setter then
								Connected1:Disconnect()
								Connected1 = nil
							else
								CD = 10
								wait(CD)
								Connected1:Disconnect()
								Connected1 = nil
								Connected1 = plr.Character.Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
									if plr.Character.Humanoid.Health <= 0 then
										if Cloned then
											local New = Cloned:Clone()
											New.Parent = plr.PlayerScripts.Core
											if not Setter then
												Connected1:Disconnect()
												Connected1 = nil
											else
												CD = 10
												wait(CD)
												plr.PlayerScripts.Core:WaitForChild("Init"):Destroy()
												CD = 0
												db = false
											end
										end
									end
								end)
								plr.PlayerScripts.Core:WaitForChild("Init"):Destroy()
								CD = 0
								db = false
							end
						end
					end
				end)
			end
		end
	end

	local Players = KP:CreateSection("Players")

	local PlrNick
	local Joined
	local Left

	local ListOfPlrs = {"Nothing"}

	for i,v in pairs(game.Players:GetChildren()) do
		ListOfPlrs[#ListOfPlrs+1] = v.Name
	end

	local ListOfPpls = KP:CreateDropdown({
		Name = "Players List",
		Options = ListOfPlrs,
		CurrentOption = {"Nothing"},
		MultipleOptions = false,
		Flag = nil, -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Option) 
			PlrNick = Option[1]
		end,
	})

	Joined = game.Players.PlayerAdded:Connect(function(plr)
		table.clear(ListOfPlrs)
		ListOfPlrs[1] = "Nothing"

		for i,v in pairs(game.Players:GetChildren()) do
			ListOfPlrs[#ListOfPlrs+1] = v.Name
		end

		ListOfPpls:Refresh(ListOfPlrs)
	end)

	Left = game.Players.PlayerRemoving:Connect(function(plr)
		--ListOfPlrs:clear()
		for i,v in pairs(ListOfPlrs) do
			if v == plr.Name then
				table.remove(ListOfPlrs, i)
				if v == ListOfPpls.CurrentOption[1] then
					ListOfPpls:Set("Nothing")
				end
			end
		end

		ListOfPpls:Refresh(ListOfPlrs)
		--[[for i,v in pairs(ListOfPlrs) do
			if v == plr.Name then
				ListOfPlrs[i] = nil
				ListOfPpls:Refresh(ListOfPlrs)
				--[[if v == ListOfPpls.CurrentOption[1] then
					ListOfPpls:Set("Nothing")
				end
			end
		end--]]
	end)

	local FarmSec = KP:CreateSection("Farming")

	local Toggle = KP:CreateToggle({
		Name = "Pumpkin Farm",
		CurrentValue = false,
		Flag = "PumpkinFarmOn", -- A flag is the identifier for the configuration file, make sure every element Qhas a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			Setter = Value

			db = false

			if Setter then
				plr.Character.HumanoidRootPart.CanCollide = true
				plr.Character.HumanoidRootPart:FindFirstChild("RootJoint").Enabled = false

				DelAnti()
			else
				plr.Character.HumanoidRootPart.CanCollide = false
				plr.Character.HumanoidRootPart:FindFirstChild("RootJoint").Enabled = true
			end

			while Setter do
				wait()
				if Setter and CD ~= 10 then
					if db then return end
					db = true
					for i,v in pairs(Workspace.Terrain:GetChildren()) do
						if not Setter or CD == 10 then return end
						if v.Name ~= "Pumpkin" or not v:FindFirstChild("MainPart") then continue end
						if v.MainPart:FindFirstChild("Explode") then v.MainPart.Explode:Destroy() end
						plr.Character.HumanoidRootPart:PivotTo(v.MainPart.CFrame + Vector3.new(0,6,0))
						wait(.3)
						plr.Character.HumanoidRootPart:PivotTo(Workspace.Workplace.Map.Balcony.Rocks.BigRock.CFrame)
						wait(.3)
					end
					db = false
				end
			end
		end,
	})

	local CurrState

	local KillsDrop = KP:CreateDropdown({
		Name = "Kills For",
		Options = {"Nothing", "Other", "You"},
		CurrentOption = {"Nothing"},
		MultipleOptions = false,
		Flag = "KillsForOn", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Option)
			CurrState = Option[1]
		end,
	})

	local Farms = false

	local Toggle2 = KP:CreateToggle({
		Name = "Kills Farm (SELECT PLAYER)",
		CurrentValue = false,
		Flag = nil, -- A flag is the identifier for the configuration file, make sure every element Qhas a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Value)
			Farms = Value
			
			if Farms then
				DelAnti()
			end
			
			while Farms do
				wait()
				if not game.Players:FindFirstChild(PlrNick) then return end
				
				if CurrState and CurrState == "Other" then
					plr.Character:PivotTo(game.Players[PlrNick].Character.HumanoidRootPart.CFrame * CFrame.new(0,0,-1))
				elseif CurrState and CurrState == "You" then
					
					if plr.PlayerGui.MainGui.InventoryGui:FindFirstChild("1") then
						if plr.PlayerGui.MainGui.InventoryGui:FindFirstChild("1").Tool.Value == "Attack" then
							plr.Character:PivotTo(game.Players[PlrNick].Character.HumanoidRootPart.CFrame * CFrame.new(0,0,1))
						else
							plr.Character:PivotTo(game.Players[PlrNick].Character.HumanoidRootPart.CFrame * CFrame.new(0,0,2))
						end
					else
						plr.Character:PivotTo(game.Players[PlrNick].Character.HumanoidRootPart.CFrame * CFrame.new(0,0,2))
					end
				end
			end
		end,
	})

	local FarmSec = KP:CreateSection("Teleports")

	local TpPosition

	local TpDrop = KP:CreateDropdown({
		Name = "Places",
		Options = {"Nothing", "Bestiary"},
		CurrentOption = {"Nothing"},
		MultipleOptions = false,
		Flag = "TpPos", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
		Callback = function(Option)
			TpPosition = Option[1]
		end,
	})
	
	local TpButton = KP:CreateButton({
		Name = "Teleport",
		Callback = function()
			if TpPosition and TpPosition == "Bestiary" then
				plr.Character:PivotTo(Workspace.Scripted.Other.Bestiary.Computer.Proximity.CFrame)
			end
		end,
	})
end
